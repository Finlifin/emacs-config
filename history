;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(read-char-history regexp-search-ring xref--read-identifier-history input-method-history helm-file-name-history eglot-command-history face-name-history sql-user-history rg-files-history woman-topic-history shell-command-history rg-pattern-history yes-or-no-p-history command-history read-expression-history read-number-history evil-ex-history minibuffer-history-search-history minibuffer-history empty-history file-name-history buffer-name-history extended-command-history))
(setq read-char-history '("j"))
(setq regexp-search-ring '(#("text" 0 4 (isearch-case-fold-search t)) #("lambda" 0 6 (isearch-case-fold-search t)) #("lam" 0 3 (isearch-case-fold-search t)) #("side" 0 4 (isearch-case-fold-search t)) #("wid" 0 3 (isearch-case-fold-search t)) #("line" 0 4 (isearch-case-fold-search t)) #("minibu" 0 6 (isearch-case-fold-search t)) #("vertico" 0 7 (isearch-case-fold-search t)) #("map" 0 3 (isearch-case-fold-search t)) #("vec" 0 3 (isearch-case-fold-search t)) #("vterm" 0 5 (isearch-case-fold-search nil)) #("q" 0 1 (isearch-case-fold-search nil))))
(setq xref--read-identifier-history '("eq"))
(setq helm-file-name-history '("packages.el" "evil.el" "packages.el" "evil.el" "eglot.el" "cmp.el" "packages.el" "files.el" "packages.el" "outlook.el" "some.zig" "packages.el" "init.el" "packages.el" "minibuffer.el" "on-editing.el" "minibuffer.el" "packages.el" "init.el" "minibuffer.el" "keymappings.el" "packages.el" "keymappings.el" "init.el" "keymappings.el" "init.el" "keymappings.el" "some.hs" "some.zig" "sql.sql" "some.c" "first.bqn" "keymappings.el" "first.bqn" "keymappings.el" "first.bqn" "some.scala" "flake.nix" "some.scala" "hhh.zig" "some.zig" "some.hs" "config.txt" "hhh.cc" "init.el" "hhh.cc" "packages.el" "hhh.cc" ".emacs.d" "hhh.cc" "some.zig" "configure" "some.zig" "some.zig" "well.cr" "1.js" "Caddyfile" "lua" "def.scm" "avl-def.scm" "def.scm" "main.zig" "main.zig" "options.el" "main.zig" "main.zig" "Caddyfile" "some" "packages.el" "some.js" "soem" "lisp" ".emacs.d" "packages.el" "config.fish" "packages.el" "keymappings.el" "some" "packages.el" "some.zig" "packages.el" "some.zig" ".emacs.d" "config.fish" "some.zig" "keymappings.el" ".emacs.d" "packages.el" "packages.el" "keymappings.el" "def.scm" "some" "fin" "def.scm" ".emacs.d" "def.scm" "avl_tree" "main.zig" "stm32_flow.ex" "stm32_flow.jl"))
(setq sql-user-history '("q"))
(setq rg-files-history '("everything" "elisp"))
(setq shell-command-history '("guile def.scm"))
(setq rg-pattern-history '("current mode" "avy" "flycheck line" "vterm-mode" "eivl" "company"))
(setq yes-or-no-p-history '("yes" "no" "yes" ":q" "yes" "no" "yes" "no" "
" "no" "yes" ":\":q\"" "yes" "no" "yes"))
(setq command-history '((dirvish nil) (execute-extended-command nil "dirvish" "di") (dirvish nil) (execute-extended-command nil "dirvish" "dirvish") (package-list-packages nil) (execute-extended-command nil "package-list-packages" "pack") (kill-buffer "init.el") (execute-extended-command nil "kill-buffer" "kill-bu") (evil-delete 1 2 'line) (evil-delete 1 6 'inclusive) (find-file "~/.emacs.d/init.el" t) (find-file "~/.emacs.d.backup2/early-init.el" t) (evil-delete 645 650 'inclusive) (evil-delete 200 205 'inclusive) (evil-replace 195 196 'exclusive 115) (evil-replace 195 196 'exclusive 97) (evil-yank 93 150 'line) (evil-delete 93 150 'line) (evil-delete 200 250 'line) (evil-yank 150 200 'line) (find-file "~/.emacs.d/lisp/evil.el" t) (find-file "~/.emacs.d/lisp/keymappings.el" t) (evil-find-char nil 106) (evil-delete 639 645 'inclusive) (evil-delete 29 33 'inclusive) (evil-delete 571 579 'line) (describe-function 'column-number-mode) (find-file "~/.emacs.d/lisp/evil.el" t) (evil-delete 574 661 'line) (evil-delete 609 628 'line) (dirvish-subtree-toggle) (execute-extended-command nil "dirvish-subtree-toggle") (dirvish-subtree-toggle) (execute-extended-command nil "dirvish-subtree-toggle" "sub ") (dirvish-layout-toggle) (execute-extended-command nil "dirvish-layout-toggle" "dir to") (evil-delete 122 189 'line) (evil-delete 145 148 'inclusive) (evil-yank 90 122 'line) (dirvish-subtree-toggle) (execute-extended-command nil "dirvish-subtree-toggle" "dirvi tree") (dirvish-layout-toggle) (execute-extended-command nil "dirvish-layout-toggle" "dir to") (evil-delete 156 170 'line) (evil-delete 330 358 'line) (evil-find-char nil 106) (eglot '(zig-mode) '(transient . "/home/fin/") 'eglot-lsp-server '("zls") '("zig") t) (execute-extended-command nil "eglot" "eglot") (describe-key '(("" . [13]))) (evil-replace 540 541 'exclusive 116) (evil-replace 571 572 'exclusive 116) (find-file "~/.emacs.d/lisp/eglot.el" t) (elisp-format-buffer) (execute-extended-command nil "elisp-format-buffer") (elisp-format-buffer) (execute-extended-command nil "elisp-format-buffer" "elisp") (elisp-format-buffer) (execute-extended-command nil "elisp-format-buffer" "elisp-form") (evil-delete 165 195 'line) (evil-delete 165 213 'line) (evil-delete 142 149 'inclusive) (find-file "~/.emacs.d/lisp/keymappings.el" t) (eglot-code-actions nil nil nil t) (execute-extended-command nil "eglot-code-actions" "eglot action") (find-file "~/.emacs.d/lisp/evil.el" t) (helm-major-mode) (execute-extended-command nil "helm-major-mode" "major ,ode") (find-file "~/.emacs.d/lisp/evil.el" t) (rg-dwim nil) (execute-extended-command nil "rg-dwim" "rg dwim ") (rg-dwim-current-file) (execute-extended-command nil "rg-dwim-current-file" "rg") (package-list-packages nil) (execute-extended-command nil "package-list-packages" "package") (rg-dwim-current-file) (execute-extended-command nil "rg-dwim-current-file" "curren") (global-flycheck-eglot-mode 'toggle) (execute-extended-command nil "global-flycheck-eglot-mode" "check") (package-list-packages nil) (execute-extended-command nil "package-list-packages" "package lis") (find-file "~/.emacs.d/lisp/evil.el" t) (evil-delete 141 146 'inclusive) (evil-replace 136 137 'exclusive 102) (evil-yank 34 91 'line) (find-file "~/.emacs.d/lisp/evil.el" t) (evil-find-char nil 39) (evil-find-char nil 39) (evil-find-char nil 39) (find-file "~/.emacs.d/lisp/keymappings.el" t) (describe-key '((" f" . [32 102]))) (elisp-format-buffer) (execute-extended-command nil "elisp-format-buffer" "elisp-forma") (global-sideline-mode 'toggle) (execute-extended-command nil "global-sideline-mode" "sidelin") (find-file "~/.emacs.d/lisp/packages.el" t) (find-file "~/.emacs.d/lisp/eglot.el" t) (global-sideline-mode 'toggle) (execute-extended-command nil "global-sideline-mode" "global side line") (find-file "~/some.zig" t) (elisp-format-buffer)))
(setq read-expression-history '("(require 'evil-anzu)" "(set-background-color \"#1c1d2200\")" "(set-background-color \"#1c1d22\")" "(set-background-color \"#114\")" "(set-background-color \"#000\")" "(set-face-bold-p 'bold nil)" "(global-set-face-attribute 'default nil :weight normal)" "(insert (do-something))" "(evil-change)" "(delete-region (region-beginning) (region-end))" "
(delete-region (region-beginning))" "q" "wq" "(kill-buffer nil)"))
(setq evil-ex-history '(#("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("116" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("'<,'>wq" 0 1 (ex-index 1) 1 2 (ex-index 2) 2 3 (ex-index 3) 3 4 (ex-index 4) 4 5 (ex-index 5) 5 6 (ex-index 6) 6 7 (ex-index 7)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2))))
(setq minibuffer-history '("column-number-mode" "sideline-lsp" "flycheck-inline-mode" "column-number-mode" "dirvish-layout-toggle" "use-package" "... (choose a dir)" "mini-popup-0.1" "haskell" "evil-cross-lines" "evil-find-char" "evil-search" "use-package" "search-forward" "isearch-forward" "string-search" "isearch-forward" "isearch-search" "avy-isearch" "meow-find" "lambda" "kanagawa" "kanagawa-theme" "evil-collection" "evil-anzu" "meow" "find" "spaceline" "outloo" "dashboard" "centaur-tabs" "lsp-completion-provider" "cmp" "evil" "ii" "keymap" "comment-region" "bqn-mode" "lsp-metals" "scala-mode" "julia-vterm" "vterm" "SOCK" "Fuck" "tree-sitter" "Forth" "Third" "Second" "First" "flycheck-eglot" "flycheck" "out" "define-key" "evil keymap" "vertico" "LSP" "cape" "hhh" "lsp-scheme" "geiser-guile" "comment-region" "corfu-terminal" "media-progress-dirvish" "rg" "lsp-mode" "orderless" "corfu" "comment-region" "dirvish" "eglot" "company-box" "company" "julia-mode" "elisp-format" "elisp-docstring-mode" "typescript-mode" "toml-mode" "yaml-mode" "json-mode" "idris-mode" "lua-mode" "fish-mode" "elixir-mode" "crystal-mode" "zig-mode" "nix-mode" "haskell-mode" "rust-mode" "caddyfile-mode" "dart-mode" "python-mode" "company" "avy" "nerd-icons-completion" "nerd-icons" "eat" "coterm" "helm" "LOVEHAIMEI" "yasnippet"))
(setq file-name-history '("~/.emacs.d/.gitigonore" "~/.emacs.d/init.el" "~/.emacs.d.backup2/early-init.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/keymappings.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/eglot.el" "~/.emacs.d/lisp" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/" "~/some.zig" "~/.emacs.d/lisp/eglot.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/keymappings.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/keymappings.el" "~/.emacs.d/lisp/packages.el" "~/some.zig" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/eglot.el" "~/some.zig" "~/.emacs.d/lisp/eglot.el" "~/.emacs.d/lisp/packages.el" "~/some.zig" "~/.emacs.d/lisp/options.el" "~/.emacs.d/]" "~/.emacs.d/some.bqn" "~/.emacs.d/lisp/keymappings.el" "~/.emacs.d/some.hs" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/keymappings.el" "~/.emacs.d/lisp/packages.el" "~/learn/zig/some/some.zig" "~/learn/zig/hh.zig" "~/learn/zig/some.zig" "~/learn/zig/some" "~/.emacs.d/lisp/packages.el" "~/.emacs.d.backup2/core/tui.el" "~/.emacs.d.backup2/core/mode-line.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/cmp.el" "~/.emacs.d/lisp/" "~/.emacs.d/init.el" "~/.emacs.d/lisp/mini-popup.el" "~/.emacs.d/lisp/minibuffer.el" "~/.emacs.d/lisp/mini-popup.el" "~/.emacs.d/lisp/mini" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/cmp.el" "~/.emacs.d/lisp/packages.el" "~/Vilya/2.vilya" "~/Vilya/2.vilya/" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/keymappings.el" "~/.emacs.d/lisp/evil.el" "~/some.zig" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/packages.el" "~/gitsrc/helix" "~/.emacs.d/lisp/eglot.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/" "~/.emacs.d/lisp/options.el" "~/learn/cpp/some.cc" "~/some.zig" "~/learn/zig/some.zig" "~/some.vilya" "~/learn/bqn/first.bqn" "~/gitsrc/helix/helix-core/src/some.rs" "~/learn/crystal/hellowasm.cr" "~/learn/crystal/hellowasm." "~/learn/crystal/hellowasm.cr" "~/gitsrc/CBQN/build/cc.bqn" "~/learn/crystal/hellowasm.cr" "~/.emacs.d/lisp/workspace.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/workspace.el" "~/.emacs.d/lisp/packages.el" "~/.emacs.d/lisp/options.el" "~/.emacs.d/lisp/workspace.el" "~/.emacs.d/lisp/options.el" "~/.config/kitty/kitty.conf" "~/.emacs.d/lisp/workspace.el" "~/.emacs.d/lisp/keymappings.el" "~/.emacs.d/lisp/workspace.el" "~/.emacs.d/lisp/keymappings.el" "~/.emacs.d/lisp/workspace.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/workspace.el" "~/.emacs.d/lisp/evil.el" "~/.emacs.d/lisp/keymappings.el"))
(setq buffer-name-history '("init.el" "*Warnings*" ".emacs.d" "*rg*" "*Dirvish-preview-G0*" "init.el" "packages.el" "lisp" "*Buffer List*" "packages.el" "🔍  /home/fin/.emacs.d/lisp/:

  -rw-r--r-- 1 fin users 4972 Oct  7 20:51 #outlook.el#
  -rw-r--r-- 1 fin users 4972 Oct  6 20:56 outlook.el
📁lisp📁G0" "packages.el<2>" "*scratch*"))
(setq extended-command-history '("dirvish" "package-list-packages" "kill-buffer" "dirvish-subtree-toggle" "dirvish-layout-toggle" "dirvish-subtree-toggle" "dirvish-layout-toggle" "eglot" "elisp-format-buffer" "eglot-code-actions" "helm-major-mode" "rg-dwim" "rg-dwim-current-file" "package-list-packages" "rg-dwim-current-file" "global-flycheck-eglot-mode" "package-list-packages" "elisp-format-buffer" "global-sideline-mode" "elisp-format-buffer" "eglot-format-buffer" "global-flycheck-eglot-mode" "package-list-packages" "package-install" "flycheck-mode" "sideline-mode" "flymake-mode" "package-list-packages" "global-flycheck-eglot-mode" "flycheck-inline-mode" "flymake-mode" "flycheck-inline-mode" "flycheck-mode" "rg" "package-list-packages" "flymake-diagnostics-buffer-mode" "flycheck-mode" "eval-buffer" "package-list-packages" "package-install" "bqn-comint-eval-buffer" "emacs-version" "zig-run" "eglot" "dirvish-subtree-toggle" "dirvish-layout-toggle" "dirvish" "dirvish-vc-menu" "dirvish-layout-toggle" "powerline-center-theme" "spaceline-info-mode" "vertico-reverse-mode" "vertico-grid-mode" "vertico-unobtrusive-mode" "vertico-multiform-mode" "vertico-posframe-mode" "vertico-grid-left" "vertico-grid-mode" "vertico-reverse-mode" "vertico-buffer-mode" "vertico-flat-mode" "list-packages" "vertico-posframe-mode" "package-list-packages" "project-find-file" "package-delete" "mini-popup-mode" "package-install-file" "package-list-packages" "comment-indent" "package-list-packages" "isearch-forward" "avy-isearch" "evil-exit-visual-state" "elisp-format-buffer" "evil-exit-visual-state" "meow-find-expand" "evil-find-char-to" "helm-find" "package-list-packages" "elisp-format-buffer" "meow-bounds-of-thing" "avy-isearch" "isearch-char-by-name" "comment-dwim" "delete-region" "meow-delete" "meow-visual-line" "meow-delete" "meow-visual-line" "next-window-any-frame" "package-list-packages" "elisp-format-buffer" "meow-bounds-of-thing" "meow-find" "meow-bounds-of-thing" "meow-find" "meow-prev" "meow-tutor" "load-theme"))
(setq evil-jumps-history 'nil)
